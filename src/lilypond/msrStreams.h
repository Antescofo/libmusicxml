/*
  MusicXML Library
  Copyright (C) Grame 2006-2013

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Grame Research Laboratory, 11, cours de Verdun Gensoul 69002 Lyon - France
  research@grame.fr
*/

#ifndef __msrStreams__
#define __msrStreams__

#include <list>
#include <map>

#include "msr.h"


namespace MusicXML2 
{

/*
  the msrStream* classes encapsulate the corresponding msr* classes,
  providing the '<<' operator to simplify the creation of MSR data
  by applications other than xml2ly
  
  fake line numbers are generated by incrementing a local counter,
  which can be useful to trace what happens when debugging
*/

//______________________________________________________________________________
class msrStreamElement : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamElement> create (
      int inputLineNumber);

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamElement (
      int inputLineNumber);
      
    virtual ~msrStreamElement ();
  
  public:

    // set and get
    // ------------------------------------------------------

    // services
    // ------------------------------------------------------

    // visitors
    // ------------------------------------------------------

/* JMI
    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/

    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);
    
  private:

    // fields
    // ------------------------------------------------------

};
typedef SMARTP<msrStreamElement> S_msrStreamElement;
EXP ostream& operator<< (ostream& os, const S_msrStreamElement& elt);

//______________________________________________________________________________
class msrStreamVoice : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamVoice> create (
      int inputLineNumber);

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamVoice (
      int inputLineNumber);
      
    virtual ~msrStreamVoice ();
  
  public:

    // set and get
    // ------------------------------------------------------

    S_msrVoice            getMsrVoice () const
                              { return fMsrVoice; }

    // services
    // ------------------------------------------------------

    void                  addVoiceToVoice (
                            S_msrVoice Voice);

    // visitors
    // ------------------------------------------------------
/* JMI

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/
    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);
    
  private:

    // fields
    // ------------------------------------------------------

    S_msrVoice            fMsrVoice;

    list<S_msrStreamElement>
                          fStreamElementsList;
};
typedef SMARTP<msrStreamVoice> S_msrStreamVoice;
EXP ostream& operator<< (ostream& os, const S_msrStreamVoice& elt);

EXP ostream& operator<< (S_msrStreamVoice& os, const S_msrStreamVoice& elt);

//______________________________________________________________________________
class msrStreamStaff : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamStaff> create (
      int inputLineNumber);

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamStaff (
      int inputLineNumber);
      
    virtual ~msrStreamStaff ();
  
  public:

    // set and get
    // ------------------------------------------------------

    S_msrStaff            getMsrStaff () const
                              { return fMsrStaff; }

    // services
    // ------------------------------------------------------

    void                  addStaffToStaff (
                            S_msrStaff Staff);

    // visitors
    // ------------------------------------------------------
/* JMI

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/
    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);
    
  private:

    // fields
    // ------------------------------------------------------

    S_msrStaff            fMsrStaff;

    list<S_msrStreamVoice>
                          fStreamVoicesList;
};
typedef SMARTP<msrStreamStaff> S_msrStreamStaff;
EXP ostream& operator<< (ostream& os, const S_msrStreamStaff& elt);

EXP ostream& operator<< (S_msrStreamStaff& os, const S_msrStreamVoice& elt);

//______________________________________________________________________________
class msrStreamPart : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamPart> create (
      int inputLineNumber);

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamPart (
      int inputLineNumber);
      
    virtual ~msrStreamPart ();
  
  public:

    // set and get
    // ------------------------------------------------------

    S_msrPart             getMsrPart () const
                              { return fMsrPart; }

    // services
    // ------------------------------------------------------

    void                  addPartToPart (
                            S_msrPart Part);

    // visitors
    // ------------------------------------------------------
/* JMI

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/
    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);
    
  private:

    // fields
    // ------------------------------------------------------

    S_msrPart             fMsrPart;

    list<S_msrStreamStaff>
                          fStreamStavesList;
};
typedef SMARTP<msrStreamPart> S_msrStreamPart;
EXP ostream& operator<< (ostream& os, const S_msrStreamPart& elt);

EXP ostream& operator<< (S_msrStreamPart& os, const S_msrStreamStaff& elt);

//______________________________________________________________________________
class msrStreamPartGroup : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamPartGroup> create (
      int inputLineNumber);

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamPartGroup (
      int inputLineNumber);
      
    virtual ~msrStreamPartGroup ();
  
  public:

    // set and get
    // ------------------------------------------------------

    S_msrPartGroup        getMsrPartGroup () const
                              { return fMsrPartGroup; }

    // services
    // ------------------------------------------------------

    void                  addPartGroupToPartGroup (
                            S_msrPartGroup partGroup);

    // visitors
    // ------------------------------------------------------
/* JMI

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/
    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);

  private:

    // fields
    // ------------------------------------------------------

    S_msrPartGroup        fMsrPartGroup;

    list<S_msrStreamPart>
                          fStreamPartsList;
};
typedef SMARTP<msrStreamPartGroup> S_msrStreamPartGroup;
EXP ostream& operator<< (ostream& os, const S_msrStreamPartGroup& elt);

EXP ostream& operator<< (S_msrStreamPartGroup& os, const S_msrStreamPart& elt);

//______________________________________________________________________________
class msrStreamScore : public smartable
{
  public:

    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrStreamScore> create (
      string scoreTitle);

    SMARTP<msrStreamScore> createScoreNewbornClone ();

  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrStreamScore (
      string scoreTitle);
      
    virtual ~msrStreamScore ();
  
  public:

    // set and get
    // ------------------------------------------------------

    S_msrScore            getMsrScore () const
                              { return fMsrScore; }

    string                getScoreTitle () const
                              { return fScoreTitle; }

    // services
    // ------------------------------------------------------

    void                  addStreamPartGroupToScore (
                            S_msrStreamPartGroup treamPartGroup);

    void                  appendCreditToScore (S_msrCredit credit);

    // visitors
    // ------------------------------------------------------
/* JMI

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);
*/
    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);
    
  private:

    // fields
    // ------------------------------------------------------

    S_msrScore            fMsrScore;

    string                fScoreTitle;

    set<S_msrStreamPartGroup>
                          fStreamPartGroupsSet;
    list<S_msrStreamPartGroup>
                          fStreamPartGroupsList;
};
typedef SMARTP<msrStreamScore> S_msrStreamScore;
EXP ostream& operator<< (ostream& os, const S_msrStreamScore& elt);

EXP ostream& operator<< (S_msrStreamScore& os, const S_msrStreamPartGroup& elt);

//______________________________________________________________________________
void initializeMSRStreams ();


} // namespace MusicXML2


#endif
