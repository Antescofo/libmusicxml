class msrDivisions;
typedef SMARTP<msrDivisions> S_msrDivisions;




    void                  appendDivisionsToMeasure (
                            S_msrDivisions divisions);

    // divisions

    void                  appendDivisionsToSegment (
                            S_msrDivisions divisions);


/*!
\brief A msr comment representation.

  A comment is represented by its contents
*/
//______________________________________________________________________________

class EXP msrDivisions : public msrElement
{
  public:
    // BOU
    // creation from MusicXML
    // ------------------------------------------------------

    static SMARTP<msrDivisions> create (
      int inputLineNumber,
      int divisionsPerQuarterNote);

  private:

    // initialisation
    // ------------------------------------------------------

    void                  initializeDivisions ();
    
  protected:

    // constructors/destructor
    // ------------------------------------------------------

    msrDivisions (
      int inputLineNumber,
      int divisionsPerQuarterNote);
      
    virtual ~msrDivisions();
  
  public:

    // set and get
    // ------------------------------------------------------

    int                   getDivisionsPerQuarterNote () const
                              { return fDivisionsPerQuarterNote; }
                        
    // services
    // ------------------------------------------------------

    string                divisionsAsString () const;

    // durations
    rational              durationAsDivisions (
                            int         inputLineNumber,
                            msrDuration duration);

    void                  printDurationsDivisions (ostream& os);

    // MSR strings
    string                divisionsAsMsrString (
                            int  inputLineNumber,
                            int  divisions,
                            int& numberOfDotsNeeded);

    string                divisionsAsMsrString (
                            int  inputLineNumber,
                            int  divisions);

    string                tupletDivisionsAsMsrString (
                            int  inputLineNumber,
                            int  divisions,
                            int actualNotes,
                            int normalNotes);

/* JMI
    void                  testDivisionsAndDurations (); // JMI
    void                  testTupletSoundingDivisionsAndDurations ();
*/

    // visitors
    // ------------------------------------------------------

    virtual void          acceptIn  (basevisitor* v);
    virtual void          acceptOut (basevisitor* v);

    virtual void          browseData (basevisitor* v);

    // print
    // ------------------------------------------------------

    virtual void          print (ostream& os);

  private:

    int                   fDivisionsPerQuarterNote;
    
    list<pair<msrDuration, int> >
                          fDurationsToDivisions;
};
typedef SMARTP<msrDivisions> S_msrDivisions;
EXP ostream& operator<< (ostream& os, const S_msrDivisions& elt);




    // divisions

    void                  appendDivisionsToVoice (
                            S_msrDivisions divisions);

    // divisions

    void                  appendDivisionsToStaff (
                            S_msrDivisions divisions);
  
    void                  setCurrentPartDivisions (
                            S_msrDivisions divisions);
                      
    S_msrDivisions        getCurrentPartDivisions () const
                              { return fCurrentPartDivisions; }

    void                  appendDivisionsToPart (
                            S_msrDivisions divisions);

    S_msrDivisions        fCurrentPartDivisions;
    
