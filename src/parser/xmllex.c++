#line 2 "xmllex.c++"

#line 4 "xmllex.c++"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer libmxml_create_buffer
#define yy_delete_buffer libmxml_delete_buffer
#define yy_flex_debug libmxml_flex_debug
#define yy_init_buffer libmxml_init_buffer
#define yy_flush_buffer libmxml_flush_buffer
#define yy_load_buffer_state libmxml_load_buffer_state
#define yy_switch_to_buffer libmxml_switch_to_buffer
#define yyin libmxmlin
#define yyleng libmxmlleng
#define yylex libmxmllex
#define yylineno libmxmllineno
#define yyout libmxmlout
#define yyrestart libmxmlrestart
#define yytext libmxmltext
#define yywrap libmxmlwrap
#define yyalloc libmxmlalloc
#define yyrealloc libmxmlrealloc
#define yyfree libmxmlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE libmxmlrestart(libmxmlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t libmxmlleng;

extern FILE *libmxmlin, *libmxmlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE libmxmllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-libmxmllineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < libmxmlleng; ++yyl )\
                    if ( libmxmltext[yyl] == '\n' )\
                        --libmxmllineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up libmxmltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up libmxmltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via libmxmlrestart()), so that the user can continue scanning by
	 * just pointing libmxmlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when libmxmltext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t libmxmlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow libmxmlwrap()'s to do buffer switches
 * instead of setting up a fresh libmxmlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void libmxmlrestart (FILE *input_file  );
void libmxml_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE libmxml_create_buffer (FILE *file,int size  );
void libmxml_delete_buffer (YY_BUFFER_STATE b  );
void libmxml_flush_buffer (YY_BUFFER_STATE b  );
void libmxmlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void libmxmlpop_buffer_state (void );

static void libmxmlensure_buffer_stack (void );
static void libmxml_load_buffer_state (void );
static void libmxml_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER libmxml_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE libmxml_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE libmxml_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE libmxml_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *libmxmlalloc (yy_size_t  );
void *libmxmlrealloc (void *,yy_size_t  );
void libmxmlfree (void *  );

#define yy_new_buffer libmxml_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        libmxmlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            libmxml_create_buffer(libmxmlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        libmxmlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            libmxml_create_buffer(libmxmlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef unsigned char YY_CHAR;

FILE *libmxmlin = (FILE *) 0, *libmxmlout = (FILE *) 0;

typedef int yy_state_type;

extern int libmxmllineno;

int libmxmllineno = 1;

extern char *libmxmltext;
#define yytext_ptr libmxmltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up libmxmltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	libmxmlleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 27
#define YY_END_OF_BUFFER 28
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[237] =
    {   0,
       26,   26,    3,    3,   26,   26,   26,   26,   26,   26,
       26,   26,   28,   27,   21,   21,   27,   27,   17,   25,
       18,   23,   23,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   22,   21,   21,   22,   22,   22,
       22,   22,   21,   27,   27,   23,   23,   23,   27,   13,
       13,   13,   27,   27,   17,   25,   18,   27,   23,   23,
       23,   23,   21,   21,    0,   17,   25,   18,    0,   24,
       20,   17,    0,   19,   11,   25,   23,   23,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        0,    3,    3,    3,    3,    3,    3,    3,    3,    3,

       22,   21,   21,   22,   22,   22,   22,   22,   22,   22,
       21,    0,    0,    0,    5,   23,   23,   23,    0,   13,
       13,    0,   13,   13,   13,    0,   17,   25,   18,    0,
       17,    0,   13,   13,   24,    0,   20,   13,    0,   19,
       11,   13,    0,   12,   23,   23,   23,   23,    0,    0,
        0,    3,    3,    2,    3,    3,    3,    3,    0,    0,
       23,   23,   23,   13,    0,   19,    0,   24,    0,   24,
        0,    0,    0,   23,   23,    1,    0,    0,    3,    3,
       10,    0,   23,   23,   23,    0,    0,    1,    0,    0,
       23,   23,    0,    4,    3,    3,    9,   23,   23,   23,

        1,    0,    0,    4,   23,   23,    0,    3,   23,   23,
       23,    0,    0,   15,   16,    0,    3,   23,   23,    6,
        0,    0,    0,    3,    7,   23,    0,    0,   14,    3,
       23,    0,   14,    8,   14,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    7,    6,    1,
        1,    1,    1,    1,    8,    9,   10,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    1,   11,
       12,   13,   14,    1,   15,   16,   17,   18,   19,   15,
       15,   15,   20,   15,   15,   21,   22,   15,   23,   24,
       15,   15,   25,   26,   27,   15,   15,   15,   28,   15,
        1,    1,    1,    1,   15,    1,   29,   15,   30,   31,

       32,   15,   33,   15,   34,   15,   15,   35,   36,   37,
       38,   15,   15,   39,   40,   41,   15,   42,   15,   43,
       44,   15,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    4,    4,    1,
        5,    1,    5,    6,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[259] =
    {   0,
        0,   25,   50,   75,  100,  125,  138,  139,  181,  206,
       16,   18,  746,  875,  230,   13,  739,  730,  141,  732,
      875,    0,  708,  722,  242,   63,   84,  717,   10,  152,
       91,  716,  255,  269,    0,  293,  113,   13,  704,  714,
      306,  320,  145,  112,  695,  670,  663,  671,  161,  344,
      165,  224,  357,  285,  339,  288,  336,    8,  371,  385,
      665,   19,    0,  194,  678,  398,  687,  875,  682,  875,
      875,  684,  140,  875,  642,  666,    0,  642,  653,  652,
      411,  423,   60,  427,  221,  646,  398,  630,  432,  621,
      605,  607,  222,  229,  594,  134,  276,  445,  574,    0,

        0,  458,  461,  585,  592,   39,    0,  583,  558,    0,
        0,  569,  166,   64,  875,  548,  544,  527,  414,  471,
      117,   35,  484,  478,  488,  501,  506,  515,  519,  197,
      522,  535,  548,  561,  567,  573,  586,  589,  593,  602,
      160,  606,  546,  539,  522,    0,  524,  510,  526,  508,
      494,  606,  520,  875,  505,  213,   86,  620,  506,  245,
      469,  469,  461,  333,  475,  363,  633,  541,  642,  486,
      655,  648,  250,  463,  450,  875,  450,  431,  231,  214,
      875,  448,  413,  411,  402,  662,  554,  670,  673,  279,
      413,  411,  394,  875,  293,  399,  875,  368,  372,  356,

      639,  676,  692,  379,  362,  340,  324,  323,  292,  293,
      278,  679,  695,    0,    0,  276,  309,  192,  164,    0,
      698,  708,  142,  361,    0,   86,  711,  717,  875,   90,
       40,  725,  735,    0,  738,  875,  749,  755,  761,  767,
      773,   65,  779,  785,  791,  797,  803,  809,  815,  821,
      827,  832,  838,  844,  850,  856,  862,  868
    } ;

static yyconst flex_int16_t yy_def[259] =
    {   0,
      237,  237,  238,  238,  239,  239,    2,    2,  240,  240,
        2,    2,  236,  236,  236,  236,  241,  236,  236,  236,
      236,  242,  242,  243,  243,  243,  244,  245,  243,  243,
      243,  243,  246,  246,  247,  247,  247,  248,  247,  247,
      249,  249,   15,  241,  236,  242,  242,  242,  250,  250,
      251,  250,  252,  250,  250,  250,  250,  253,  254,  254,
      242,  242,   15,  236,  236,  236,  236,  236,  241,  236,
      236,  236,  236,  236,  236,  236,  242,  242,  243,  245,
      243,  243,  243,  243,  243,  243,  244,  243,  255,  245,
      236,  243,  243,  243,  243,  243,  243,  256,   34,   34,

      247,  247,  247,  247,  247,  248,  247,  247,   42,   42,
       43,  236,  241,  241,  236,  242,  242,  242,  250,  250,
      251,  253,  250,  251,  250,  250,  250,  250,  250,  251,
      251,  252,  252,  257,  250,  258,  250,  250,  250,  250,
      253,  250,  253,  253,   60,   60,  242,  242,  236,  236,
      236,  255,  245,  236,  245,  243,  243,  256,  241,  241,
      242,  242,  242,  251,  251,  251,  257,  251,  258,  253,
      250,  250,  253,  242,  242,  236,  236,  236,  243,  243,
      236,  241,  242,  242,  242,  251,  251,  250,  250,  253,
      242,  242,  236,  236,  243,  243,  236,  242,  242,  242,

      251,  251,  250,  253,  242,  242,  236,  243,  242,  242,
      242,  251,  250,  242,  242,  236,  243,  242,  242,  242,
      251,  250,  236,  243,  242,  242,  251,  250,  236,  243,
      242,  251,  250,  242,  251,    0,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236
    } ;

static yyconst flex_int16_t yy_nxt[920] =
    {   0,
       14,   15,   16,   16,   14,   17,   14,   14,   14,   18,
       19,   20,   21,   14,   64,   64,   64,   80,  107,  101,
      144,  122,   92,   66,   23,   14,   15,   16,   16,   14,
       17,   14,   14,   14,   18,   19,   20,   21,   14,   61,
       62,   61,   62,   78,  107,  101,  148,  144,  122,   23,
       24,   25,   26,   26,   24,   27,   24,   28,   24,   29,
       30,   31,   32,   24,   82,   82,   82,   80,   77,   70,
       80,  234,   92,   84,   34,   24,   25,   26,   26,   24,
       27,   24,   28,   24,   29,   30,   31,   32,   24,   88,
       79,   89,   97,   80,   79,  160,   79,   80,   80,   34,

       35,   36,   37,   37,   35,   38,   35,   35,   35,   39,
       19,   40,   21,   35,  103,  103,  103,   70,  121,  121,
      121,  180,  231,   66,   42,   35,   36,   37,   37,   35,
       38,   35,   35,   35,   39,   19,   40,   21,   35,   43,
       43,   80,   72,   44,   44,   73,  111,  149,  113,   42,
       74,   45,   45,   93,   75,  114,   94,  150,  112,   80,
      229,   95,  120,  121,  120,   96,  124,  124,  124,   46,
       46,   70,  144,  122,  122,  131,  157,   47,   47,   48,
       48,   49,   50,   51,   52,   49,   53,   49,   49,   49,
       54,   55,   56,   57,   58,   64,   64,   64,  121,  121,

      121,  226,  173,  159,   66,   60,   49,   50,   51,   52,
       49,   53,   49,   49,   49,   54,   55,   56,   57,   58,
       80,   80,   97,   93,  225,  125,  124,  125,   80,   80,
       60,   63,   64,   64,  127,  179,  155,  122,   80,   65,
       66,   67,   68,   81,   82,   82,  156,  195,  196,   80,
       70,   83,   84,   85,   86,   79,   79,   79,   79,   79,
       79,   79,   98,  122,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   98,   97,   79,   79,
       79,   79,   79,   80,  182,  190,  120,  121,  120,  142,
      121,  120,  122,  100,  102,  103,  103,  137,  122,  223,

       80,  122,  104,   66,  105,   68,  101,  101,  101,  101,
      101,  101,  101,  204,  220,  101,   80,  101,  208,  101,
      101,  101,  101,  101,  101,  101,  101,  219,  218,  101,
       80,  101,  224,  101,  164,  121,  121,  120,  121,  120,
      138,  121,  120,  139,  110,  123,  124,  125,  140,  122,
      217,  216,  141,  126,  127,  128,  129,  122,  133,  134,
      133,  215,  135,  119,  121,  121,  121,  119,   80,  119,
      136,  119,  120,  121,  120,  119,  119,  119,  214,  230,
      119,  119,  119,  119,  122,  119,  120,  121,  120,  119,
      119,  119,  122,  211,  119,  119,  119,  119,  122,   72,

      210,  209,   73,   88,   79,   89,   80,   74,   79,  146,
       79,   75,   81,   82,   82,  120,  121,  120,   80,  207,
       83,   84,   85,   86,   82,   82,   82,  122,   93,  206,
       80,   94,  205,   84,   80,  200,   95,  153,   90,   69,
       96,  199,   90,  198,   90,   90,   90,   90,   90,   90,
       90,   90,   77,  197,   90,   90,   90,   90,   90,  102,
      103,  103,  103,  103,  103,  194,  193,  104,   66,  105,
       68,   66,  120,  121,  120,  192,  121,  121,  121,  124,
      124,  124,  186,  191,  122,  123,  124,  125,  131,  125,
      124,  125,  187,  126,  127,  128,  129,  122,  127,  122,

      185,  122,  120,  121,  120,  184,  183,  138,  121,  120,
      139,  181,  176,  137,  122,  140,  142,  121,  120,  141,
      120,  121,  120,  164,  121,  121,  165,  236,  122,  178,
      177,  166,  122,  176,  175,   75,  133,  134,  133,  174,
      135,  119,  121,  121,  121,  119,  145,  119,  136,  133,
      134,  133,  122,  135,  119,  121,  121,  121,  119,  122,
      119,  136,  134,  134,  134,  163,  168,  130,  120,  121,
      120,  130,  162,  130,   69,   69,  202,  161,  170,  143,
      122,  115,  109,  143,  108,  144,  136,  120,  121,  120,
      138,  121,  120,  108,  120,  121,  120,   71,   99,  122,

      171,   80,  122,  120,  121,  120,  122,  142,  121,  120,
      172,  153,   90,   69,   80,  122,   90,  154,   90,  122,
       90,   90,   90,   90,   90,   90,   90,   77,  236,   90,
       90,   90,   90,   90,  134,  134,  134,   80,  168,  130,
      121,  121,  121,  130,   69,  130,   69,  170,  143,  120,
      121,  120,  143,   80,  143,  136,  120,  121,  120,  236,
       80,  122,  188,  121,  121,  121,   78,   76,  122,  201,
      189,  120,  121,  120,  120,  121,  120,  121,  121,  121,
      121,  121,  121,  122,  151,   72,  122,   70,   76,  203,
       71,  147,  212,  120,  121,  120,  120,  121,  120,  121,

      121,  121,  118,  117,  221,  122,  116,  115,  122,  120,
      121,  120,  121,  121,  121,  108,   71,  213,  120,  121,
      120,  122,  222,   80,   91,  227,  121,  121,  121,   80,
      122,  228,   78,   76,  232,  233,  120,  121,  120,  121,
      121,  121,   71,  235,   70,  236,  236,  236,  122,   22,
       22,   22,   22,   22,   22,   33,   33,   33,   33,   33,
       33,   41,   41,   41,   41,   41,   41,   59,   59,   59,
       59,   59,   59,   69,   69,  236,   69,  236,   69,   79,
       79,   79,   79,   79,   79,   87,   87,   87,   87,   87,
       87,   90,   90,   90,   90,   90,   90,   99,   99,   99,

       99,   99,   99,  101,  101,  101,  101,  236,  101,  106,
      106,  106,  106,  236,  106,  109,  109,  109,  109,  236,
      109,  119,  119,  119,  119,  119,  119,  130,  130,  130,
      130,  130,  132,  132,  132,  132,  132,  132,  143,  236,
      143,  143,  143,  143,  145,  145,  145,  145,  145,  145,
      152,  152,  152,  152,  152,  152,  158,  158,  158,  158,
      158,  158,  167,  167,  167,  167,  167,  167,  169,  169,
      169,  169,  169,  169,   13,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236
    } ;

static yyconst flex_int16_t yy_chk[920] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   16,   16,   16,   29,   38,   38,
       58,   58,   29,   16,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   11,
       11,   12,   12,   62,  106,  106,   62,  122,  122,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   26,   26,   26,   83,  242,  114,
       26,  231,   83,   26,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,   27,
       27,   27,   31,  157,   27,  114,   27,  230,   31,    4,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   37,   37,   37,   44,  121,  121,
      121,  157,  226,   37,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    7,
        8,   96,   19,    7,    8,   19,   43,   73,   44,    6,
       19,    7,    8,   30,   19,   44,   30,   73,   43,   30,
      223,   30,   49,   49,   49,   30,   51,   51,   51,    7,
        8,  113,  141,  141,   49,   51,   96,    7,    8,    7,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   64,   64,   64,  130,  130,

      130,  219,  141,  113,   64,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
      156,  180,   85,   93,  218,   52,   52,   52,   85,   93,
       10,   15,   15,   15,   52,  156,   94,   52,  179,   15,
       15,   15,   15,   25,   25,   25,   94,  179,  180,   25,
      160,   25,   25,   25,   25,   33,   33,   33,   33,   33,
       33,   33,   33,  173,   33,   33,   33,   33,   33,   34,
       34,   34,   34,   34,   34,   34,   34,   97,   34,   34,
       34,   34,   34,   97,  160,  173,   54,   54,   54,   56,
       56,   56,  190,   34,   36,   36,   36,   54,   54,  216,

      195,   56,   36,   36,   36,   36,   41,   41,   41,   41,
       41,   41,   41,  190,  211,   41,  217,   41,  195,   41,
       42,   42,   42,   42,   42,   42,   42,  210,  209,   42,
      208,   42,  217,   42,  164,  164,  164,   57,   57,   57,
       55,   55,   55,   55,   42,   50,   50,   50,   55,   57,
      208,  207,   55,   50,   50,   50,   50,   50,   53,   53,
       53,  206,   53,   53,  166,  166,  166,   53,  224,   53,
       53,   59,   59,   59,   59,   59,   59,   59,  205,  224,
       59,   59,   59,   59,   59,   60,   60,   60,   60,   60,
       60,   60,  204,  200,   60,   60,   60,   60,   60,   66,

      199,  198,   66,   87,   87,   87,  196,   66,   87,   60,
       87,   66,   81,   81,   81,  119,  119,  119,   81,  193,
       81,   81,   81,   81,   82,   82,   82,  119,   84,  192,
       82,   84,  191,   82,   84,  185,   84,   89,   89,   89,
       84,  184,   89,  183,   89,   98,   98,   98,   98,   98,
       98,   98,   98,  182,   98,   98,   98,   98,   98,  102,
      102,  102,  103,  103,  103,  178,  177,  102,  102,  102,
      102,  103,  120,  120,  120,  175,  165,  165,  165,  124,
      124,  124,  165,  174,  120,  123,  123,  123,  124,  125,
      125,  125,  165,  123,  123,  123,  123,  123,  125,  170,

      163,  125,  126,  126,  126,  162,  161,  127,  127,  127,
      127,  159,  155,  126,  126,  127,  128,  128,  128,  127,
      129,  129,  129,  131,  131,  131,  131,  153,  128,  151,
      150,  131,  129,  149,  148,  131,  132,  132,  132,  147,
      132,  132,  168,  168,  168,  132,  145,  132,  132,  133,
      133,  133,  144,  133,  133,  187,  187,  187,  133,  143,
      133,  133,  134,  134,  134,  118,  134,  134,  135,  135,
      135,  134,  117,  134,  134,  136,  187,  116,  136,  136,
      135,  112,  109,  136,  108,  136,  136,  137,  137,  137,
      138,  138,  138,  105,  139,  139,  139,  104,   99,  137,

      139,   95,  138,  140,  140,  140,  139,  142,  142,  142,
      139,  152,  152,  152,   92,  140,  152,   91,  152,  142,
      158,  158,  158,  158,  158,  158,  158,  158,   90,  158,
      158,  158,  158,  158,  167,  167,  167,   88,  167,  167,
      201,  201,  201,  167,  169,  167,  167,  169,  169,  172,
      172,  172,  169,   86,  169,  169,  171,  171,  171,   80,
       79,  172,  171,  186,  186,  186,   78,   76,  171,  186,
      172,  188,  188,  188,  189,  189,  189,  202,  202,  202,
      212,  212,  212,  188,   75,   72,  189,   69,   67,  189,
       65,   61,  202,  203,  203,  203,  213,  213,  213,  221,

      221,  221,   48,   47,  212,  203,   46,   45,  213,  222,
      222,  222,  227,  227,  227,   40,   39,  203,  228,  228,
      228,  222,  213,   32,   28,  221,  232,  232,  232,   24,
      228,  222,   23,   20,  227,  228,  233,  233,  233,  235,
      235,  235,   18,  232,   17,   13,    0,    0,  233,  237,
      237,  237,  237,  237,  237,  238,  238,  238,  238,  238,
      238,  239,  239,  239,  239,  239,  239,  240,  240,  240,
      240,  240,  240,  241,  241,    0,  241,    0,  241,  243,
      243,  243,  243,  243,  243,  244,  244,  244,  244,  244,
      244,  245,  245,  245,  245,  245,  245,  246,  246,  246,

      246,  246,  246,  247,  247,  247,  247,    0,  247,  248,
      248,  248,  248,    0,  248,  249,  249,  249,  249,    0,
      249,  250,  250,  250,  250,  250,  250,  251,  251,  251,
      251,  251,  252,  252,  252,  252,  252,  252,  253,    0,
      253,  253,  253,  253,  254,  254,  254,  254,  254,  254,
      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      256,  256,  257,  257,  257,  257,  257,  257,  258,  258,
      258,  258,  258,  258,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[28] =
    {   0,
1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 
    0, 1, 1, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int libmxml_flex_debug;
int libmxml_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *libmxmltext;
#line 1 "xml.l"
#line 2 "xml.l"
 
/* 
  Basic relaxed xml lexical definition.
  This is a basic definition of the lexical elements necessary to cover 
  the MusicXML format. It is a simplified form based on the XML document
  grammar as defined in 
  "XML in a nutshell - 2nd edition" E.R.Harold and W.S.Means,
  O'Reilly, June 2002, pp:366--371
*/

#include "xmlparse.hpp"
#include <stdio.h>

#define YY_NO_UNISTD_H

extern int libmxmllval;

static int utf16 = 0;
static int bigendian = 1;
static int start = 1;

static int wgetc (FILE * fd) {
  int c = getc(fd);
  if (start) {
    if (c == 0xff) {
      utf16 = 1; bigendian = 0;
      getc(fd); c = getc(fd);
    }
    else if (c == 0xfe) {
      utf16 = 1; bigendian = 1;
      getc(fd); c = getc(fd);
    }
    start = 0;
  }
  if (utf16) {
    if (bigendian) c = getc(fd);
    else getc(fd);
  }

  return c;
}

static size_t wfread (void * buf, size_t size, size_t nmemb, FILE * fd) {
  char * ptr = (char *)buf;
  size_t n=0;
  while (nmemb--) {
    *ptr++ = wgetc(fd);
    if (feof(fd) || ferror(fd) ) break;
    n++;
  }
  return n;
}
     
void lexinit (FILE* fd) {
  utf16 = 0;
  bigendian = 1;
  start = 1;
  libmxmlrestart(fd);
}
     
void lexend () {
  if (YY_CURRENT_BUFFER) {
    libmxml_delete_buffer (YY_CURRENT_BUFFER);
  }
}

#define getc  wgetc
#define fread wfread
#define register 		// this is to get rid of deprecated register warning


#line 842 "xmllex.c++"

#define INITIAL 0
#define COMMENTSECT 1
#define DATASECT 2
#define XMLSECT 3
#define PISECT 4
#define DOCTYPESECT 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int libmxmllex_destroy (void );

int libmxmlget_debug (void );

void libmxmlset_debug (int debug_flag  );

YY_EXTRA_TYPE libmxmlget_extra (void );

void libmxmlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *libmxmlget_in (void );

void libmxmlset_in  (FILE * in_str  );

FILE *libmxmlget_out (void );

void libmxmlset_out  (FILE * out_str  );

yy_size_t libmxmlget_leng (void );

char *libmxmlget_text (void );

int libmxmlget_lineno (void );

void libmxmlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int libmxmlwrap (void );
#else
extern int libmxmlwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( libmxmltext, libmxmlleng, 1, libmxmlout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( libmxmlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( libmxmlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, libmxmlin))==0 && ferror(libmxmlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(libmxmlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int libmxmllex (void);

#define YY_DECL int libmxmllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after libmxmltext and libmxmlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 91 "xml.l"



#line 1033 "xmllex.c++"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! libmxmlin )
			libmxmlin = stdin;

		if ( ! libmxmlout )
			libmxmlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			libmxmlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				libmxml_create_buffer(libmxmlin,YY_BUF_SIZE );
		}

		libmxml_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of libmxmltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 237 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 236 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < libmxmlleng; ++yyl )
				if ( libmxmltext[yyl] == '\n' )
					   
    libmxmllineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 94 "xml.l"
{ BEGIN COMMENTSECT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "xml.l"
{ BEGIN 0; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 96 "xml.l"
{ return COMMENT; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 99 "xml.l"
{ BEGIN XMLSECT; return XMLDECL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "xml.l"
{ BEGIN 0; return ENDXMLDECL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 101 "xml.l"
{ return VERSION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 102 "xml.l"
{ return ENCODING; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "xml.l"
{ return STANDALONE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "xml.l"
{ libmxmllval=1; return YES; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "xml.l"
{ libmxmllval=0; return NO; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 107 "xml.l"
{ BEGIN PISECT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 108 "xml.l"
{ BEGIN 0; return PI; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 109 "xml.l"
{ return PI; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 111 "xml.l"
{ BEGIN DOCTYPESECT; return DOCTYPE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "xml.l"
{ return PUBLIC; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "xml.l"
{ return SYSTEM; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 115 "xml.l"
{ BEGIN 0; return LT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "xml.l"
{ BEGIN DATASECT; return GT; }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 117 "xml.l"
{ BEGIN 0; return ENDXMLS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "xml.l"
{ return ENDXMLE; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 120 "xml.l"
{ return SPACE; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 121 "xml.l"
{ return DATA; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "xml.l"
{ return NAME; }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 123 "xml.l"
{ return QUOTEDSTR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "xml.l"
{ return EQ; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "xml.l"
{ /* extra space ignored*/ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTSECT):
case YY_STATE_EOF(DATASECT):
case YY_STATE_EOF(XMLSECT):
case YY_STATE_EOF(PISECT):
case YY_STATE_EOF(DOCTYPESECT):
#line 128 "xml.l"
yyterminate();
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "xml.l"
ECHO;
	YY_BREAK
#line 1277 "xmllex.c++"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed libmxmlin at a new source and called
			 * libmxmllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = libmxmlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( libmxmlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * libmxmltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of libmxmllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					libmxmlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			libmxmlrestart(libmxmlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) libmxmlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 237 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 237 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 236);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up libmxmltext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --libmxmllineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					libmxmlrestart(libmxmlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( libmxmlwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve libmxmltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    libmxmllineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void libmxmlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        libmxmlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            libmxml_create_buffer(libmxmlin,YY_BUF_SIZE );
	}

	libmxml_init_buffer(YY_CURRENT_BUFFER,input_file );
	libmxml_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void libmxml_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		libmxmlpop_buffer_state();
	 *		libmxmlpush_buffer_state(new_buffer);
     */
	libmxmlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	libmxml_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (libmxmlwrap()) processing, but the only time this flag
	 * is looked at is after libmxmlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void libmxml_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	libmxmlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE libmxml_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) libmxmlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in libmxml_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) libmxmlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in libmxml_create_buffer()" );

	b->yy_is_our_buffer = 1;

	libmxml_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with libmxml_create_buffer()
 * 
 */
    void libmxml_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		libmxmlfree((void *) b->yy_ch_buf  );

	libmxmlfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a libmxmlrestart() or at EOF.
 */
    static void libmxml_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	libmxml_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then libmxml_init_buffer was _probably_
     * called from libmxmlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void libmxml_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		libmxml_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void libmxmlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	libmxmlensure_buffer_stack();

	/* This block is copied from libmxml_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from libmxml_switch_to_buffer. */
	libmxml_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void libmxmlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	libmxml_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		libmxml_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void libmxmlensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)libmxmlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in libmxmlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)libmxmlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in libmxmlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE libmxml_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) libmxmlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in libmxml_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	libmxml_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to libmxmllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       libmxml_scan_bytes() instead.
 */
YY_BUFFER_STATE libmxml_scan_string (yyconst char * yystr )
{
    
	return libmxml_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to libmxmllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE libmxml_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) libmxmlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in libmxml_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = libmxml_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in libmxml_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up libmxmltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		libmxmltext[libmxmlleng] = (yy_hold_char); \
		(yy_c_buf_p) = libmxmltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		libmxmlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int libmxmlget_lineno  (void)
{
        
    return libmxmllineno;
}

/** Get the input stream.
 * 
 */
FILE *libmxmlget_in  (void)
{
        return libmxmlin;
}

/** Get the output stream.
 * 
 */
FILE *libmxmlget_out  (void)
{
        return libmxmlout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t libmxmlget_leng  (void)
{
        return libmxmlleng;
}

/** Get the current token.
 * 
 */

char *libmxmlget_text  (void)
{
        return libmxmltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void libmxmlset_lineno (int  line_number )
{
    
    libmxmllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see libmxml_switch_to_buffer
 */
void libmxmlset_in (FILE *  in_str )
{
        libmxmlin = in_str ;
}

void libmxmlset_out (FILE *  out_str )
{
        libmxmlout = out_str ;
}

int libmxmlget_debug  (void)
{
        return libmxml_flex_debug;
}

void libmxmlset_debug (int  bdebug )
{
        libmxml_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from libmxmllex_destroy(), so don't allocate here.
     */

    /* We do not touch libmxmllineno unless the option is enabled. */
    libmxmllineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    libmxmlin = stdin;
    libmxmlout = stdout;
#else
    libmxmlin = (FILE *) 0;
    libmxmlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * libmxmllex_init()
     */
    return 0;
}

/* libmxmllex_destroy is for both reentrant and non-reentrant scanners. */
int libmxmllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		libmxml_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		libmxmlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	libmxmlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * libmxmllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *libmxmlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *libmxmlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void libmxmlfree (void * ptr )
{
	free( (char *) ptr );	/* see libmxmlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 129 "xml.l"
